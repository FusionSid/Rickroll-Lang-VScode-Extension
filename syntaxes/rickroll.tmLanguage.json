{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Rickroll-Lang",
  "patterns": [
      {
          "include": "#comments"
      },
      {
          "include": "#strings"
      },
      {
          "include": "#number"
      },
      {
          "include": "#keywords"
      }
  ],
  "repository": {
      "strings": {
          "name": "string.quoted.double.rickroll",
          "begin": "\"",
          "end": "\"",
          "patterns": [
              {
                  "name": "constant.character.escape.rickroll",
                  "match": "\\\\."
              }
          ]
      },
      "number": {
          "match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
          "name": "constant.numeric.rickroll"
      },
      "comments": {
          "name": "comment.line.rickroll",
          "match": "(#).*$"
      },
      "keywords": {
          "patterns": [
              {
                  "name": "variable.rickroll",
                  "begin": "\\b(?=give)\\b",
                  "end": "\\b(?=up)\\b"
              },
              {
                  "name" : "storage.type.rickroll",
                  "match": "\\b(give)\\b"
              },
              {
                  "name": "keyword.operator.assignment.rickroll",
                  "match": "\\b(up)\\b"
              },
              {
                  "name": "keyword.control.import.rickroll",
                  "match": "\\b(we\\s*know\\s*the|and\\s*we're\\s*gonna\\s*play\\s*it)\\b"
              },
              {
                  "name": "storage.type.function.rickroll",
                  "match": "\\b(gonna)\\b"
              },
              {
                  "name":"support.function.rickroll",
                  "match": "[a-zA-Z]+\\([^\\)]*\\)(\\.[^\\)]*\\))?"
              },
              {
                  "name": "variable.parameter.rickroll",
                  "match": "(?<=gonna)(.*)(?=$)"
              },
              {
                  "name": "keyword.control.flow.rickroll",
                  "match": "\\b(when\\s*i\\s*give\\s*my|and\\s*if\\s*u\\s*ask\\s*me\\s*how\\s*im\\s*feeling|it\\s*will\\s*be\\s*completely|there\\s*aint\\s*no\\s*mistaking|if\\s*they\\s*ever\\s*get\\s*u\\s*down|take\\s*me\\s*to\\s*ur\\s*heart|say\\s*goodbye|desert\\s*u|run\\s*around|together\\s*forever\\s*and\\s*never\\s*to\\s*part|together\\s*forever\\s*with)\\b"
              },
              {
                  "name": "keyword.operator.comparison.rickroll",
                  "match": "\\b(is\\s*less\\s*than|is\\s*greater\\s*than|is\\s*greater\\s*than\\s*or\\s*equal\\s*to|is\\s*less\\s*than\\s*or\\s*equal\\s*to)\\b"
              },
              {
                  "name": "keyword.operator.logical.rickroll",
                  "match": "\\b(is|aint)\\b"
              },
              {
                  "name": "support.function.builtin.rickroll",
                  "match": "\\b(i\\s*just\\s*wanna\\s*tell\\s*u\\s*how\\s*im\\s*feeling|to_string|to_int|to_float|length|py:)\\b"
              },
              {
                  "name": "keyword.operator.arithmetic.rickroll",
                  "match": "(\\+|\\-|\\*|/|%|\\^|=|>|<|<=|>=|!=)"
              },
              {
                  "name": "punctuation.separator.element.rickroll",
                  "match": "\\b(,)\\b"
              },
              {
                  "name": "invalid.deprecated.tilde.rickroll",
                  "match": "\\b(~)\\b"
              }
          ]
      }
  },
  "scopeName": "source.rickroll"
}